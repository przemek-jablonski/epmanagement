<?php

namespace TicketBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UserBundle\Entity\user;

/**
 * ticketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ticketRepository extends EntityRepository {


    public function findAllTicketsAdmin(){
        $this->findAll();
    }

    public function findAllUpcomingTicketsUser(user $user) {
        return $this->createQueryBuilder('t')
            ->andWhere('t.userCreated = :inputUsername')
            ->andWhere('t.dateDeadline > :now')
            ->setParameter('inputUsername', $user->getId())
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->execute();

    }

    public function findAllOverdueTicketsUser(user $user) {
        return $this->createQueryBuilder('t')
            ->andWhere('t.userCreated = :inputUsername')
            ->andWhere('t.dateDeadline <= :now')
            ->setParameter('inputUsername', $user->getId())
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->execute();

    }

    public function findAllTicketsProject() {
        //todo in future, where orm will have project entity
    }

    public function testFind(){
        return $this->createQueryBuilder('t')
            ->addOrderBy('t.dateDeadline', 'ASC')
            ->andWhere('t.dateDeadline > :now')
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->execute();
    }

    public function findAllUpcomingTickets() {
        return $this->createQueryBuilder('t')
            ->addOrderBy('t.dateDeadline', 'ASC')
            ->andWhere('t.dateDeadline > :now')
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->execute();
    }

    public function findAllOverdueTickets() {
        return $this->createQueryBuilder('t')
            ->addOrderBy('t.dateDeadline', 'ASC')
            ->andWhere('t.dateDeadline <= :now')
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->execute();
    }

    public function findAllDoneTickets() {
        //todo when some enum will apear in ORM
    }

    public function findAllNotDoneTickets() {
        //todo when some enum will apear in ORM
    }

}
